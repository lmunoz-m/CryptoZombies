"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("./client");
var helpers_1 = require("./helpers");
var loom_pb_1 = require("./proto/loom_pb");
var address_1 = require("./address");
var crypto_utils_1 = require("./crypto-utils");
var bytesToHexAddrLC = function (bytes) {
    return crypto_utils_1.bytesToHexAddr(bytes).toLowerCase();
};
var numberToHexLC = function (num) {
    return crypto_utils_1.numberToHex(num).toLowerCase();
};
/**
 * Web3 provider that interacts with EVM contracts deployed on Loom DAppChains.
 */
var LoomProvider = /** @class */ (function () {
    /**
     * Constructs the LoomProvider to bridges communication between Web3 and Loom DappChains
     *
     * @param client Client from LoomJS
     * @param privateKey Account private key
     */
    function LoomProvider(client, privateKey) {
        var _this = this;
        this._client = client;
        this._topicsList = [];
        this.notificationCallbacks = new Array();
        this.accounts = new Map();
        this.accountsAddrList = new Array();
        this._client.addListener(client_1.ClientEvent.Contract, function (msg) {
            return _this._onWebSocketMessage(msg);
        });
        this.addDefaultEvents();
        this.addAccounts([privateKey]);
    }
    /**
     * Creates new accounts by passing the private key array
     *
     * Accounts will be available on public properties accounts and accountsAddrList
     *
     * @param accountsPrivateKey Array of private keys to create new accounts
     */
    LoomProvider.prototype.addAccounts = function (accountsPrivateKey) {
        var _this = this;
        accountsPrivateKey.forEach(function (accountPrivateKey) {
            var publicKey = crypto_utils_1.publicKeyFromPrivateKey(accountPrivateKey);
            var accountAddress = address_1.LocalAddress.fromPublicKey(publicKey).toString();
            _this.accountsAddrList.push(accountAddress);
            _this.accounts.set(accountAddress, accountPrivateKey);
        });
    };
    // PUBLIC FUNCTION TO SUPPORT WEB3
    LoomProvider.prototype.on = function (type, callback) {
        switch (type) {
            case 'data':
                this.notificationCallbacks.push(callback);
                break;
            case 'connect':
                this._client.addListener(client_1.ClientEvent.Connected, callback);
                break;
            case 'end':
                this._client.addListener(client_1.ClientEvent.Disconnected, callback);
                break;
            case 'error':
                this._client.addListener(client_1.ClientEvent.Error, callback);
                break;
        }
    };
    LoomProvider.prototype.addDefaultEvents = function () {
        var _this = this;
        this._client.addListener(client_1.ClientEvent.Disconnected, function () {
            // reset all requests and callbacks
            _this.reset();
        });
    };
    LoomProvider.prototype.removeListener = function (type, callback) {
        switch (type) {
            case 'data':
                this.notificationCallbacks = [];
                break;
            case 'connect':
                this._client.removeListener(client_1.ClientEvent.Connected, callback);
                break;
            case 'end':
                this._client.removeListener(client_1.ClientEvent.Disconnected, callback);
                break;
            case 'error':
                this._client.removeListener(client_1.ClientEvent.Error, callback);
                break;
        }
    };
    LoomProvider.prototype.removeAllListeners = function (type, callback) {
        var _this = this;
        if (type === 'data') {
            this.notificationCallbacks.forEach(function (cb, index) {
                if (cb === callback) {
                    _this.notificationCallbacks.splice(index, 1);
                }
            });
        }
    };
    LoomProvider.prototype.reset = function () {
        this._topicsList = [];
        this.notificationCallbacks = [];
    };
    LoomProvider.prototype.disconnect = function () {
        this._client.disconnect();
    };
    // Adapter function for sendAsync from truffle provider
    LoomProvider.prototype.sendAsync = function (payload, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.send(payload, callback)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Should be used to make async request
     * This method is used internally by web3, so we adapt it to be used with loom contract
     * when we are wrapping the evm on a DAppChain
     * @param payload JSON payload generated by web3 which will be translated to loom transaction/call
     * @param callback Triggered on end with (err, result)
     */
    LoomProvider.prototype.send = function (payload, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var isArray, okMethods, _a, GUIDHex, result, err_1, result, err_2, result, err_3, result, err_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        isArray = Array.isArray(payload);
                        if (isArray) {
                            payload = payload[0];
                        }
                        okMethods = ['eth_estimateGas', 'eth_gasPrice', 'eth_blockNumber'];
                        /**
                         * NOTE: _okResponse and okMethods array are mocks, only to allow web3js think that is talking
                         * to an Ethereum Node
                         */
                        // Ok just avoids web3js issues
                        if (okMethods.indexOf(payload.method) !== -1) {
                            return [2 /*return*/, callback(null, this._okResponse(payload.id, null, isArray))];
                        }
                        _a = payload.method;
                        switch (_a) {
                            case 'net_version': return [3 /*break*/, 1];
                            case 'eth_accounts': return [3 /*break*/, 2];
                            case 'eth_newBlockFilter': return [3 /*break*/, 3];
                            case 'eth_getBlockByNumber': return [3 /*break*/, 4];
                            case 'eth_getFilterChanges': return [3 /*break*/, 5];
                            case 'eth_sendTransaction': return [3 /*break*/, 6];
                            case 'eth_getCode': return [3 /*break*/, 13];
                            case 'eth_call': return [3 /*break*/, 17];
                            case 'eth_getTransactionReceipt': return [3 /*break*/, 21];
                            case 'eth_subscribe': return [3 /*break*/, 25];
                            case 'eth_uninstallFilter': return [3 /*break*/, 26];
                            case 'eth_getLogs': return [3 /*break*/, 27];
                        }
                        return [3 /*break*/, 28];
                    case 1:
                        // TODO: Create call for supply on Loom DappChain
                        // Fixed network version 474747
                        callback(null, this._okResponse(payload.id, '474747', isArray));
                        return [3 /*break*/, 29];
                    case 2:
                        if (this.accountsAddrList.length === 0) {
                            throw Error('No account available');
                        }
                        callback(null, this._okResponse(payload.id, this.accountsAddrList));
                        return [3 /*break*/, 29];
                    case 3:
                        GUIDHex = Buffer.from(crypto_utils_1.getGUID()).toString('hex');
                        callback(null, this._okResponse(payload.id, "0x" + GUIDHex, isArray));
                        return [3 /*break*/, 29];
                    case 4:
                        // Simulate get block by number
                        // TODO: Create call for supply on Loom DappChain
                        callback(null, this._okResponse(payload.id, this._simulateEmptyBlock(), isArray));
                        return [3 /*break*/, 29];
                    case 5:
                        // Simulate return from block filter
                        // TODO: Create call for supply on Loom DappChain
                        callback(null, [
                            this._okResponse(payload.id, [
                                '0x0000000000000000000000000000000000000000000000000000000000000001'
                            ])
                        ]);
                        return [3 /*break*/, 29];
                    case 6:
                        _b.trys.push([6, 11, , 12]);
                        result = void 0;
                        if (!payload.params[0].to) return [3 /*break*/, 8];
                        return [4 /*yield*/, this._callAsync(payload.params[0])];
                    case 7:
                        result = _b.sent();
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this._deployAsync(payload.params[0])];
                    case 9:
                        result = _b.sent();
                        _b.label = 10;
                    case 10:
                        callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray));
                        return [3 /*break*/, 12];
                    case 11:
                        err_1 = _b.sent();
                        callback(err_1, null);
                        return [3 /*break*/, 12];
                    case 12: return [3 /*break*/, 29];
                    case 13:
                        _b.trys.push([13, 15, , 16]);
                        return [4 /*yield*/, this._getCode(payload.params[0])];
                    case 14:
                        result = _b.sent();
                        callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray));
                        return [3 /*break*/, 16];
                    case 15:
                        err_2 = _b.sent();
                        callback(err_2, null);
                        return [3 /*break*/, 16];
                    case 16: return [3 /*break*/, 29];
                    case 17:
                        _b.trys.push([17, 19, , 20]);
                        return [4 /*yield*/, this._callStaticAsync(payload.params[0])];
                    case 18:
                        result = _b.sent();
                        callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray));
                        return [3 /*break*/, 20];
                    case 19:
                        err_3 = _b.sent();
                        callback(err_3, null);
                        return [3 /*break*/, 20];
                    case 20: return [3 /*break*/, 29];
                    case 21:
                        _b.trys.push([21, 23, , 24]);
                        return [4 /*yield*/, this._getReceipt(payload.params[0])];
                    case 22:
                        result = _b.sent();
                        callback(null, this._okResponse(payload.id, result, isArray));
                        return [3 /*break*/, 24];
                    case 23:
                        err_4 = _b.sent();
                        callback(err_4, null);
                        return [3 /*break*/, 24];
                    case 24: return [3 /*break*/, 29];
                    case 25:
                        // Required to avoid web3js error, because web3js always want to know about a transaction
                        if (payload.params[0] === 'logs') {
                            this._topicsList = this._topicsList.concat(payload.params[1].topics);
                            callback(null, this._okResponse(payload.params[1].topics[0], isArray));
                        }
                        else {
                            callback(null, this._okResponse(payload.id, isArray));
                        }
                        return [3 /*break*/, 29];
                    case 26:
                        // TODO: Create call for supply on Loom DappChain
                        callback(null, this._okResponse(payload.id, true, isArray));
                        return [3 /*break*/, 29];
                    case 27:
                        // TODO: Create call for supply on Loom DappChain
                        callback(null, this._okResponse(payload.id, [], isArray));
                        return [3 /*break*/, 29];
                    case 28:
                        // Warn the user about we don't support other methods
                        callback(Error("Method \"" + payload.method + "\" not supported on this provider"), null);
                        return [3 /*break*/, 29];
                    case 29: return [2 /*return*/];
                }
            });
        });
    };
    // PRIVATE FUNCTIONS
    LoomProvider.prototype._getCode = function (contractAddress) {
        var address = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(contractAddress));
        return this._client.getCodeAsync(address);
    };
    LoomProvider.prototype._deployAsync = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var caller, address, data, deployTx, msgTx, tx, ret, response, responseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        caller = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(payload.from));
                        address = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString('0x0000000000000000000000000000000000000000'));
                        data = Buffer.from(payload.data.substring(2), 'hex');
                        deployTx = new loom_pb_1.DeployTx();
                        deployTx.setVmType(loom_pb_1.VMType.EVM);
                        deployTx.setCode(crypto_utils_1.bufferToProtobufBytes(data));
                        msgTx = new loom_pb_1.MessageTx();
                        msgTx.setFrom(caller.MarshalPB());
                        msgTx.setTo(address.MarshalPB());
                        msgTx.setData(deployTx.serializeBinary());
                        tx = new loom_pb_1.Transaction();
                        tx.setId(1);
                        tx.setData(msgTx.serializeBinary());
                        return [4 /*yield*/, this._commitTransaction(payload.from, tx)];
                    case 1:
                        ret = _a.sent();
                        response = loom_pb_1.DeployResponse.deserializeBinary(crypto_utils_1.bufferToProtobufBytes(ret));
                        responseData = loom_pb_1.DeployResponseData.deserializeBinary(crypto_utils_1.bufferToProtobufBytes(response.getOutput_asU8()));
                        return [2 /*return*/, responseData.getTxHash_asU8()];
                }
            });
        });
    };
    LoomProvider.prototype._callAsync = function (payload) {
        var caller = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(payload.from));
        var address = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(payload.to));
        var data = Buffer.from(payload.data.substring(2), 'hex');
        var callTx = new loom_pb_1.CallTx();
        callTx.setVmType(loom_pb_1.VMType.EVM);
        callTx.setInput(crypto_utils_1.bufferToProtobufBytes(data));
        var msgTx = new loom_pb_1.MessageTx();
        msgTx.setFrom(caller.MarshalPB());
        msgTx.setTo(address.MarshalPB());
        msgTx.setData(callTx.serializeBinary());
        var tx = new loom_pb_1.Transaction();
        tx.setId(2);
        tx.setData(msgTx.serializeBinary());
        return this._commitTransaction(payload.from, tx);
    };
    LoomProvider.prototype._callStaticAsync = function (payload) {
        var caller = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(payload.from));
        var address = new address_1.Address(this._client.chainId, address_1.LocalAddress.fromHexString(payload.to));
        var data = Buffer.from(payload.data.substring(2), 'hex');
        return this._client.queryAsync(address, data, loom_pb_1.VMType.EVM, caller);
    };
    LoomProvider.prototype._getReceipt = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var data, receipt, transactionHash, transactionIndex, blockHash, blockNumber, contractAddress, logs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = Buffer.from(txHash.substring(2), 'hex');
                        return [4 /*yield*/, this._client.getTxReceiptAsync(crypto_utils_1.bufferToProtobufBytes(data))];
                    case 1:
                        receipt = _a.sent();
                        if (!receipt) {
                            throw Error('Receipt cannot be empty');
                        }
                        transactionHash = '0x0000000000000000000000000000000000000000000000000000000000000000';
                        transactionIndex = numberToHexLC(receipt.getTransactionIndex());
                        blockHash = bytesToHexAddrLC(receipt.getBlockHash_asU8());
                        blockNumber = numberToHexLC(receipt.getBlockNumber());
                        contractAddress = bytesToHexAddrLC(receipt.getContractAddress_asU8());
                        logs = receipt.getLogsList().map(function (logEvent, index) {
                            var logIndex = numberToHexLC(index);
                            return {
                                logIndex: logIndex,
                                address: contractAddress,
                                blockHash: blockHash,
                                blockNumber: blockNumber,
                                transactionHash: transactionHash,
                                transactionIndex: transactionIndex,
                                type: 'mined',
                                data: bytesToHexAddrLC(logEvent.getData_asU8()),
                                topics: logEvent.getTopicsList_asU8().map(function (topic) { return bytesToHexAddrLC(topic); })
                            };
                        });
                        return [2 /*return*/, {
                                transactionHash: transactionHash,
                                transactionIndex: transactionIndex,
                                blockHash: blockHash,
                                blockNumber: blockNumber,
                                contractAddress: contractAddress,
                                gasUsed: numberToHexLC(receipt.getGasUsed()),
                                cumulativeGasUsed: numberToHexLC(receipt.getCumulativeGasUsed()),
                                logs: logs,
                                status: numberToHexLC(receipt.getStatus())
                            }];
                }
            });
        });
    };
    LoomProvider.prototype._onWebSocketMessage = function (msgEvent) {
        var _this = this;
        if (msgEvent.data) {
            var event_1 = loom_pb_1.Event.deserializeBinary(crypto_utils_1.bufferToProtobufBytes(msgEvent.data));
            this.notificationCallbacks.forEach(function (callback) {
                var topics = event_1
                    .getTopicsList_asU8()
                    .map(function (topic) { return bytesToHexAddrLC(topic); });
                var topicIdxFound = _this._topicsList.indexOf(topics[0]);
                if (topicIdxFound !== -1) {
                    var topicFound = _this._topicsList[topicIdxFound];
                    var JSONRPCResult = {
                        jsonrpc: '2.0',
                        method: 'eth_subscription',
                        params: {
                            // TODO: This ID Should came from loomchain events
                            subscription: topicFound,
                            result: {
                                // TODO: Values bellow should be fix in the future
                                logIndex: '0x00',
                                transactionIndex: '0x00',
                                transactionHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                                blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
                                blockNumber: '0x0',
                                address: '0x0000000000000000000000000000000000000000',
                                type: 'mined',
                                data: bytesToHexAddrLC(event_1.getData_asU8()),
                                topics: topics
                            }
                        }
                    };
                    callback(JSONRPCResult);
                }
            });
        }
    };
    LoomProvider.prototype._commitTransaction = function (fromPublicAddr, txTransaction) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, middleware;
            return __generator(this, function (_a) {
                privateKey = this.accounts.get(fromPublicAddr);
                if (!privateKey) {
                    throw Error("Account not found for address " + fromPublicAddr);
                }
                middleware = helpers_1.createDefaultTxMiddleware(this._client, privateKey);
                return [2 /*return*/, this._client.commitTxAsync(txTransaction, { middleware: middleware })];
            });
        });
    };
    LoomProvider.prototype._simulateEmptyBlock = function (block) {
        if (block === void 0) { block = {}; }
        return Object.assign({
            number: '0x0',
            hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
            mixHash: '0x1010101010101010101010101010101010101010101010101010101010101010',
            nonce: '0x0000000000000000',
            sha3Uncles: '0x0000000000000000000000000000000000000000000000000000000000000000',
            logsBloom: '0x
            transactionsRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
            stateRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
            receiptsRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
            miner: '0x0000000000000000000000000000000000000000',
            difficulty: '0x0',
            totalDifficulty: '0x0',
            extraData: '0x00',
            size: '0x0',
            gasLimit: '0x0',
            gasUsed: '0x0',
            timestamp: '0x0',
            transactions: []
        }, block);
    };
    // Basic response to web3js
    LoomProvider.prototype._okResponse = function (id, result, isArray) {
        if (result === void 0) { result = 0; }
        if (isArray === void 0) { isArray = false; }
        var response = { id: id, jsonrpc: '2.0', result: result };
        var ret = isArray ? [response] : response;
        return ret;
    };
    return LoomProvider;
}());
exports.LoomProvider = LoomProvider;
//# sourceMappingURL=loom-provider.js.map