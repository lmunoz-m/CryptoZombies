import { Client } from './client';
export interface IEthReceipt {
    transactionHash: string;
    transactionIndex: string;
    blockHash: string;
    blockNumber: string;
    gasUsed: string;
    cumulativeGasUsed: string;
    contractAddress: string;
    logs: Array<any>;
    status: string;
}
/**
 * Web3 provider that interacts with EVM contracts deployed on Loom DAppChains.
 */
export declare class LoomProvider {
    private _client;
    private _topicsList;
    protected notificationCallbacks: Array<Function>;
    readonly accounts: Map<string, Uint8Array>;
    readonly accountsAddrList: Array<string>;
    /**
     * Constructs the LoomProvider to bridges communication between Web3 and Loom DappChains
     *
     * @param client Client from LoomJS
     * @param privateKey Account private key
     */
    constructor(client: Client, privateKey: Uint8Array);
    /**
     * Creates new accounts by passing the private key array
     *
     * Accounts will be available on public properties accounts and accountsAddrList
     *
     * @param accountsPrivateKey Array of private keys to create new accounts
     */
    addAccounts(accountsPrivateKey: Array<Uint8Array>): void;
    on(type: string, callback: any): void;
    addDefaultEvents(): void;
    removeListener(type: string, callback: (...args: any[]) => void): void;
    removeAllListeners(type: string, callback: Function): void;
    reset(): void;
    disconnect(): void;
    sendAsync(payload: any, callback: Function): Promise<void>;
    /**
     * Should be used to make async request
     * This method is used internally by web3, so we adapt it to be used with loom contract
     * when we are wrapping the evm on a DAppChain
     * @param payload JSON payload generated by web3 which will be translated to loom transaction/call
     * @param callback Triggered on end with (err, result)
     */
    send(payload: any, callback: Function): Promise<any>;
    private _getCode(contractAddress);
    private _deployAsync(payload);
    private _callAsync(payload);
    private _callStaticAsync(payload);
    private _getReceipt(txHash);
    private _onWebSocketMessage(msgEvent);
    private _commitTransaction(fromPublicAddr, txTransaction);
    private _simulateEmptyBlock(block?);
    private _okResponse(id, result?, isArray?);
}
